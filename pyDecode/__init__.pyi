# Copyright (c) 2024 Advanced Micro Devices, Inc. All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from typing import Any, ClassVar, Dict
from typing import overload
import numpy

# AMD Video Decoder
class pyRocVideoDecoder:
    @overload
    def __init__(self) -> None: ...
    def GetDeviceinfo(self) -> None: ...
    def SetReconfigParams(self) -> None: ...
    def DecodeFrame(self) -> None: ...
    def GetFrame(self) -> None: ...
    def SaveFrameToFile(self) -> None: ...
    def ReleaseFrame(self) -> None: ...
    def GetOutputSurfaceInfo(self) -> None: ...
    def GetNumOfFlushedFrames(self) -> None: ...

# USER defined demuxer
class usrVideoDemuxer:
    @overload
    def __init__(self) -> None: ...
    def GetCodec_ID(self) -> None: ...
    def DemuxFrame(self) -> None: ...

# Rect struct
class Rect:
    def init(self) -> None: ...
    left: ClassVar[Rect] = ...
    top: ClassVar[Rect] = ...
    right: ClassVar[Rect] = ...
    bottom: ClassVar[Rect] = ...

# OutputSurfaceInfo
class OutputSurfaceInfo:
        output_width: ClassVar[OutputSurfaceInfo] = ...
        output_height: ClassVar[OutputSurfaceInfo] = ...
        output_pitch: ClassVar[OutputSurfaceInfo] = ...
        output_vstride: ClassVar[OutputSurfaceInfo] = ...
        bytes_per_pixel: ClassVar[OutputSurfaceInfo] = ...
        bit_depth: ClassVar[OutputSurfaceInfo] = ...
        num_chroma_planes: ClassVar[OutputSurfaceInfo] = ...
        output_surface_size_in_bytes: ClassVar[OutputSurfaceInfo] = ...
        surface_format: ClassVar[OutputSurfaceInfo] = ...
        mem_type: ClassVar[OutputSurfaceInfo] = ...

 